generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model OrganizationMember {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  userId         String       @map("user_id") @db.Uuid
  role           String       @default("member") @db.VarChar(50)
  joinedAt       DateTime?    @default(now()) @map("joined_at") @db.Timestamptz(6)
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, userId])
  @@index([organizationId], map: "idx_organization_members_org_id")
  @@index([userId], map: "idx_organization_members_user_id")
  @@map("organization_members")
}

model Organization {
  id              String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String                   @db.VarChar(255)
  description     String?
  createdBy       String                   @map("created_by") @db.Uuid
  createdAt       DateTime?                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?                @default(now()) @map("updated_at") @db.Timestamptz(6)
  members         OrganizationMember[]
  invitations     OrganizationInvitation[]
  categories      Category[]
  paymentMethods  PaymentMethod[]
  transactions    Transaction[]

  @@map("organizations")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model PaymentMethod {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String        @map("organization_id") @db.Uuid
  name           String        @db.VarChar(255)
  type           String        @db.VarChar(50)
  bankName       String?       @map("bank_name") @db.VarChar(255)
  accountNumber  String?       @map("account_number") @db.VarChar(255)
  cardCompany    String?       @map("card_company") @db.VarChar(255)
  lastFourDigits String?       @map("last_four_digits") @db.VarChar(4)
  isActive       Boolean?      @default(true) @map("is_active")
  createdAt      DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?     @default(now()) @map("updated_at") @db.Timestamptz(6)
  organization   Organization  @relation(fields: [organizationId], references: [id])
  transactions   Transaction[]

  @@index([organizationId], map: "idx_payment_methods_org_id")
  @@index([type], map: "idx_payment_methods_type")
  @@map("payment_methods")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Category {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String        @map("organization_id") @db.Uuid
  name           String        @db.VarChar(255)
  type           String        @db.VarChar(20) // income, savings, fixed_expense, variable_expense
  parentId       String?       @map("parent_id") @db.Uuid
  displayOrder   Int?          @default(0) @map("display_order")
  isActive       Boolean       @default(true) @map("is_active")
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)
  organization   Organization  @relation(fields: [organizationId], references: [id])
  // Remove self-referential relationship - handle parent-child logic in application
  // parent         Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  // children       Category[]    @relation("CategoryHierarchy")
  // transactions   Transaction[]

  @@index([organizationId], map: "idx_categories_org_id")
  @@index([type], map: "idx_categories_type")
  @@index([parentId], map: "idx_categories_parent_id")
  @@index([organizationId, type], map: "idx_categories_org_id_type")
  @@index([organizationId, parentId], map: "idx_categories_org_id_parent_id")
  @@map("categories")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Transaction {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId  String         @map("organization_id") @db.Uuid
  userId          String         @map("user_id") @db.Uuid
  amount          Decimal        @db.Decimal(15, 2)
  description     String?
  transactionDate DateTime       @default(dbgenerated("CURRENT_DATE")) @map("transaction_date") @db.Date
  transactionType String         @map("transaction_type") @db.VarChar(20)
  categoryId      String?        @map("category_id") @db.Uuid
  paymentMethodId String?        @map("payment_method_id") @db.Uuid
  tags            String[]
  memo            String?
  receiptUrl      String?        @map("receipt_url")
  createdAt       DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?      @default(now()) @map("updated_at") @db.Timestamptz(6)
  organization    Organization   @relation(fields: [organizationId], references: [id])
  // Remove category relationship - handle in application level
  // category        Category?      @relation(fields: [categoryId], references: [id])
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  @@index([transactionDate], map: "idx_transactions_date")
  @@index([organizationId], map: "idx_transactions_org_id")
  @@index([categoryId], map: "idx_transactions_category_id")
  @@index([paymentMethodId], map: "idx_transactions_payment_method_id")
  @@index([transactionType], map: "idx_transactions_type")
  @@index([userId], map: "idx_transactions_user_id")
  @@index([organizationId, categoryId], map: "idx_transactions_org_id_category_id")
  @@map("transactions")
}

/// Organization invitation model for member invitation system
model OrganizationInvitation {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  email          String       @db.VarChar(255)
  role           String       @default("member") @db.VarChar(50)
  token          String       @unique @db.VarChar(255)
  status         String       @default("pending") @db.VarChar(50) // pending, accepted, rejected, expired, cancelled
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt      DateTime     @map("expires_at") @db.Timestamptz(6)
  acceptedAt     DateTime?    @map("accepted_at") @db.Timestamptz(6)
  acceptedBy     String?      @map("accepted_by") @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId], map: "idx_organization_invitations_org_id")
  @@index([email], map: "idx_organization_invitations_email")
  @@index([token], map: "idx_organization_invitations_token")
  @@index([status], map: "idx_organization_invitations_status")
  @@map("organization_invitations")
}
